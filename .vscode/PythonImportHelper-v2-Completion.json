[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "PathLike",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "PathLike",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "override",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_model",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "anthropic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "anthropic",
        "description": "anthropic",
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "ToolChoiceParam",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "ToolUnionParam",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "MessageParam",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "TextBlockParam",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "anthropic.types",
        "description": "anthropic.types",
        "isExtraImport": true,
        "detail": "anthropic.types",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "NOT_GIVEN",
        "importPath": "anthropic._types",
        "description": "anthropic._types",
        "isExtraImport": true,
        "detail": "anthropic._types",
        "documentation": {}
    },
    {
        "label": "NotGiven",
        "importPath": "anthropic._types",
        "description": "anthropic._types",
        "isExtraImport": true,
        "detail": "anthropic._types",
        "documentation": {}
    },
    {
        "label": "genai",
        "importPath": "google",
        "description": "google",
        "isExtraImport": true,
        "detail": "google",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "openai.types.responses",
        "description": "openai.types.responses",
        "isExtraImport": true,
        "detail": "openai.types.responses",
        "documentation": {}
    },
    {
        "label": "ChatModel",
        "importPath": "openai.types",
        "description": "openai.types",
        "isExtraImport": true,
        "detail": "openai.types",
        "documentation": {}
    },
    {
        "label": "NOT_GIVEN",
        "importPath": "openai._types",
        "description": "openai._types",
        "isExtraImport": true,
        "detail": "openai._types",
        "documentation": {}
    },
    {
        "label": "NotGiven",
        "importPath": "openai._types",
        "description": "openai._types",
        "isExtraImport": true,
        "detail": "openai._types",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "xai_sdk",
        "description": "xai_sdk",
        "isExtraImport": true,
        "detail": "xai_sdk",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "xai_sdk",
        "description": "xai_sdk",
        "isExtraImport": true,
        "detail": "xai_sdk",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "xai_sdk.chat",
        "description": "xai_sdk.chat",
        "isExtraImport": true,
        "detail": "xai_sdk.chat",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "xai_sdk.chat",
        "description": "xai_sdk.chat",
        "isExtraImport": true,
        "detail": "xai_sdk.chat",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "xai_sdk.proto.v6.chat_pb2",
        "description": "xai_sdk.proto.v6.chat_pb2",
        "isExtraImport": true,
        "detail": "xai_sdk.proto.v6.chat_pb2",
        "documentation": {}
    },
    {
        "label": "MessageRole",
        "importPath": "xai_sdk.proto.v6.chat_pb2",
        "description": "xai_sdk.proto.v6.chat_pb2",
        "isExtraImport": true,
        "detail": "xai_sdk.proto.v6.chat_pb2",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "think_reason_learn.core._config",
        "description": "think_reason_learn.core._config",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._config",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "PydanticBaseSettingsSource",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "numpy.typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LLMChoice",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "TokenCounter",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "llm",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "LLMChoice",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "llm",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "TokenCounter",
        "importPath": "think_reason_learn.core.llms",
        "description": "think_reason_learn.core.llms",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.llms",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "LLMError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "CorruptionError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "CorruptionError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "LLMError",
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "isExtraImport": true,
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "JSONValue",
        "importPath": "think_reason_learn.core._types",
        "description": "think_reason_learn.core._types",
        "isExtraImport": true,
        "detail": "think_reason_learn.core._types",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "find_spec",
        "importPath": "importlib.util",
        "description": "importlib.util",
        "isExtraImport": true,
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'think-reason-learn-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'think-reason-learn-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'think-reason-learn-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'think-reason-learn-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'think-reason-learn-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "project = \"Think Reason Learn\"\ncopyright = f\"{date.today().year}, Vela Research\"\nauthor = \"Vela Research\"\nrelease = \"0.1.0\"\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "copyright = f\"{date.today().year}, Vela Research\"\nauthor = \"Vela Research\"\nrelease = \"0.1.0\"\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx_design\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "author = \"Vela Research\"\nrelease = \"0.1.0\"\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx_design\",\n    \"sphinx.ext.autosummary\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "release = \"0.1.0\"\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx_design\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx_autodoc_typehints\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.intersphinx\",\n    \"sphinx_design\",\n    \"sphinx.ext.autosummary\",\n    \"sphinx_autodoc_typehints\",\n    \"sphinxcontrib.autodoc_pydantic\",\n    \"myst_parser\",\n]",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "intersphinx_mapping",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "intersphinx_mapping = {\n    \"python\": (\"https://docs.python.org/3\", None),\n    \"pandas\": (\"https://pandas.pydata.org/pandas-docs/stable\", None),\n    \"numpy\": (\"https://numpy.org/doc/stable\", None),\n    \"pydantic\": (\"https://docs.pydantic.dev/latest\", None),\n}\n# Make Sphinx include type hints alongside docstring descriptions\nautodoc_typehints = \"description\"\nautosummary_generate = True\ntypehints_use_signature = False",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_typehints",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_typehints = \"description\"\nautosummary_generate = True\ntypehints_use_signature = False\ntypehints_fully_qualified = False\nautoclass_content = \"class\"\nautodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autosummary_generate",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autosummary_generate = True\ntypehints_use_signature = False\ntypehints_fully_qualified = False\nautoclass_content = \"class\"\nautodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "typehints_use_signature",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "typehints_use_signature = False\ntypehints_fully_qualified = False\nautoclass_content = \"class\"\nautodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "typehints_fully_qualified",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "typehints_fully_qualified = False\nautoclass_content = \"class\"\nautodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autoclass_content",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autoclass_content = \"class\"\nautodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,\n    \"imported-members\": False,",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_member_order",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_member_order = \"groupwise\"\npython_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,\n    \"imported-members\": False,\n}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "python_use_unqualified_type_names",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "python_use_unqualified_type_names = True\nadd_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,\n    \"imported-members\": False,\n}\n# Napoleon settings for Google-style docstrings",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "add_module_names",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "add_module_names = False\nautodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,\n    \"imported-members\": False,\n}\n# Napoleon settings for Google-style docstrings\nnapoleon_google_docstring = True",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_default_options",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_default_options = {\n    \"members\": True,\n    \"undoc-members\": False,\n    \"inherited-members\": False,\n    \"show-inheritance\": True,\n    \"imported-members\": False,\n}\n# Napoleon settings for Google-style docstrings\nnapoleon_google_docstring = True\nnapoleon_attr_types = False",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "napoleon_google_docstring",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "napoleon_google_docstring = True\nnapoleon_attr_types = False\nnapoleon_preprocess_types = True\nnapoleon_use_param = True\nnapoleon_use_rtype = True\n# autodoc_pydantic settings to avoid duplication and combine fields\nautodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "napoleon_attr_types",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "napoleon_attr_types = False\nnapoleon_preprocess_types = True\nnapoleon_use_param = True\nnapoleon_use_rtype = True\n# autodoc_pydantic settings to avoid duplication and combine fields\nautodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "napoleon_preprocess_types",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "napoleon_preprocess_types = True\nnapoleon_use_param = True\nnapoleon_use_rtype = True\n# autodoc_pydantic settings to avoid duplication and combine fields\nautodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "napoleon_use_param",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "napoleon_use_param = True\nnapoleon_use_rtype = True\n# autodoc_pydantic settings to avoid duplication and combine fields\nautodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "napoleon_use_rtype",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "napoleon_use_rtype = True\n# autodoc_pydantic settings to avoid duplication and combine fields\nautodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_model_member_order",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_model_member_order = \"groupwise\"\nautodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_model_show_field_summary",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_model_show_field_summary = False\nautodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoice\": \"LLMChoice\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_field_list_style",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_field_list_style = \"compact\"\nautodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoice\": \"LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceModel\": \"LLMChoiceModel\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_field_doc_policy",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_field_doc_policy = \"description\"\nautodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoice\": \"LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceModel\": \"LLMChoiceModel\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceDict\": \"LLMChoiceDict\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_model_show_json",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_model_show_json = False\nautodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoice\": \"LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceModel\": \"LLMChoiceModel\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceDict\": \"LLMChoiceDict\",\n# }",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_pydantic_model_show_config_summary",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "autodoc_pydantic_model_show_config_summary = True\n# autodoc_type_aliases = {\n#     \"LLMChoiceModel\": \"think_reason_learn.core.llms._schemas.LLMChoiceModel\",\n#     \"LLMChoiceDict\": \"think_reason_learn.core.llms._schemas.LLMChoiceDict\",\n#     \"LLMChoice\": \"think_reason_learn.core.llms._schemas.LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoice\": \"LLMChoice\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceModel\": \"LLMChoiceModel\",\n#     \"think_reason_learn.core.llms._schemas.LLMChoiceDict\": \"LLMChoiceDict\",\n# }\n# MyST niceties",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "myst_enable_extensions",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "myst_enable_extensions = [\"colon_fence\", \"deflist\", \"linkify\"]\nmyst_url_schemes = (\"http\", \"https\", \"mailto\")\nnitpicky = True\nnitpick_ignore = [\n    (\"py:class\", \"anthropic.NotGiven\"),\n    (\"py:class\", \"openai.NotGiven\"),\n    (\"py:class\", \"T\"),\n    (\"py:obj\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"think_reason_learn.core._singleton.T\"),\n    (\"py:class\", \"think_reason_learn.core.llms._schemas.T\"),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "myst_url_schemes",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "myst_url_schemes = (\"http\", \"https\", \"mailto\")\nnitpicky = True\nnitpick_ignore = [\n    (\"py:class\", \"anthropic.NotGiven\"),\n    (\"py:class\", \"openai.NotGiven\"),\n    (\"py:class\", \"T\"),\n    (\"py:obj\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"think_reason_learn.core._singleton.T\"),\n    (\"py:class\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"TypeAliasForwardRef\"),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "nitpicky",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "nitpicky = True\nnitpick_ignore = [\n    (\"py:class\", \"anthropic.NotGiven\"),\n    (\"py:class\", \"openai.NotGiven\"),\n    (\"py:class\", \"T\"),\n    (\"py:obj\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"think_reason_learn.core._singleton.T\"),\n    (\"py:class\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"TypeAliasForwardRef\"),\n    (\"py:class\", \"LLMChoiceModel\"),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "nitpick_ignore",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "nitpick_ignore = [\n    (\"py:class\", \"anthropic.NotGiven\"),\n    (\"py:class\", \"openai.NotGiven\"),\n    (\"py:class\", \"T\"),\n    (\"py:obj\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"think_reason_learn.core._singleton.T\"),\n    (\"py:class\", \"think_reason_learn.core.llms._schemas.T\"),\n    (\"py:class\", \"TypeAliasForwardRef\"),\n    (\"py:class\", \"LLMChoiceModel\"),\n    (\"py:class\", \"asyncio.locks.Lock\"),",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "nitpick_ignore_regex",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "nitpick_ignore_regex = [\n    (r\"py:class\", r\"DataFrame containing\"),\n    (r\"py:class\", r\"done based on (prediction|semantic)\"),\n]\ntemplates_path = [\"_templates\"]\nexclude_patterns = []\nsource_suffix = {\n    \".rst\": \"restructuredtext\",\n    \".md\": \"markdown\",\n}",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "templates_path = [\"_templates\"]\nexclude_patterns = []\nsource_suffix = {\n    \".rst\": \"restructuredtext\",\n    \".md\": \"markdown\",\n}\n# -- Options for HTML output ------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = \"pydata_sphinx_theme\"\nhtml_static_path = [\"_static\"]",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "exclude_patterns = []\nsource_suffix = {\n    \".rst\": \"restructuredtext\",\n    \".md\": \"markdown\",\n}\n# -- Options for HTML output ------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = \"pydata_sphinx_theme\"\nhtml_static_path = [\"_static\"]\nhtml_css_files = [\"custom.css\"]",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "source_suffix = {\n    \".rst\": \"restructuredtext\",\n    \".md\": \"markdown\",\n}\n# -- Options for HTML output ------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\nhtml_theme = \"pydata_sphinx_theme\"\nhtml_static_path = [\"_static\"]\nhtml_css_files = [\"custom.css\"]\n# Custom JavaScript to make external links open in new tabs",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme = \"pydata_sphinx_theme\"\nhtml_static_path = [\"_static\"]\nhtml_css_files = [\"custom.css\"]\n# Custom JavaScript to make external links open in new tabs\nhtml_js_files = [\n    \"external_links.js\",\n]\nhtml_title = \"Think Reason Learn\"\nhtml_short_title = \"TRL\"\nhtml_theme_options = {",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_static_path = [\"_static\"]\nhtml_css_files = [\"custom.css\"]\n# Custom JavaScript to make external links open in new tabs\nhtml_js_files = [\n    \"external_links.js\",\n]\nhtml_title = \"Think Reason Learn\"\nhtml_short_title = \"TRL\"\nhtml_theme_options = {\n    \"logo\": {",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_css_files",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_css_files = [\"custom.css\"]\n# Custom JavaScript to make external links open in new tabs\nhtml_js_files = [\n    \"external_links.js\",\n]\nhtml_title = \"Think Reason Learn\"\nhtml_short_title = \"TRL\"\nhtml_theme_options = {\n    \"logo\": {\n        \"image_light\": \"_static/logo-light.png\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_js_files",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_js_files = [\n    \"external_links.js\",\n]\nhtml_title = \"Think Reason Learn\"\nhtml_short_title = \"TRL\"\nhtml_theme_options = {\n    \"logo\": {\n        \"image_light\": \"_static/logo-light.png\",\n        \"image_dark\": \"_static/logo-dark.png\",\n        \"alt_text\": \"Think Reason Learn\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_title",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_title = \"Think Reason Learn\"\nhtml_short_title = \"TRL\"\nhtml_theme_options = {\n    \"logo\": {\n        \"image_light\": \"_static/logo-light.png\",\n        \"image_dark\": \"_static/logo-dark.png\",\n        \"alt_text\": \"Think Reason Learn\",\n    },\n    \"icon_links\": [\n        {",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_short_title",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_short_title = \"TRL\"\nhtml_theme_options = {\n    \"logo\": {\n        \"image_light\": \"_static/logo-light.png\",\n        \"image_dark\": \"_static/logo-dark.png\",\n        \"alt_text\": \"Think Reason Learn\",\n    },\n    \"icon_links\": [\n        {\n            \"name\": \"GitHub\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "docs.source.conf",
        "description": "docs.source.conf",
        "peekOfCode": "html_theme_options = {\n    \"logo\": {\n        \"image_light\": \"_static/logo-light.png\",\n        \"image_dark\": \"_static/logo-dark.png\",\n        \"alt_text\": \"Think Reason Learn\",\n    },\n    \"icon_links\": [\n        {\n            \"name\": \"GitHub\",\n            \"url\": \"https://github.com/vela-research/think-reason-learn\",",
        "detail": "docs.source.conf",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "PROJECT_ROOT = Path(__file__).resolve().parents[1]\nif str(PROJECT_ROOT) not in sys.path:\n    sys.path.insert(0, str(PROJECT_ROOT))",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_placeholder",
        "kind": 2,
        "importPath": "tests.test_placeholder",
        "description": "tests.test_placeholder",
        "peekOfCode": "def test_placeholder():\n    \"\"\"Test the placeholder test.\"\"\"\n    assert True",
        "detail": "tests.test_placeholder",
        "documentation": {}
    },
    {
        "label": "AnthropicInput",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._anthropic.ask",
        "description": "think_reason_learn.core.llms._anthropic.ask",
        "peekOfCode": "class AnthropicInput(TypedDict):\n    messages: List[MessageParam]\n    system: str | Iterable[TextBlockParam] | NotGiven\n    tools: List[ToolUnionParam] | NotGiven\n    tool_choice: ToolChoiceParam | NotGiven\n    temperature: float | NotGiven\n    kwargs: Dict[str, Any]\nclass AnthropicLLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = anthropic.Anthropic(api_key=api_key)",
        "detail": "think_reason_learn.core.llms._anthropic.ask",
        "documentation": {}
    },
    {
        "label": "AnthropicLLM",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._anthropic.ask",
        "description": "think_reason_learn.core.llms._anthropic.ask",
        "peekOfCode": "class AnthropicLLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = anthropic.Anthropic(api_key=api_key)\n        self.aclient = anthropic.AsyncAnthropic(api_key=api_key)\n    def _process_input(\n        self,\n        query: str,\n        response_format: Type[T],\n        instructions: str | NotGiven,\n        temperature: float | NotGiven,",
        "detail": "think_reason_learn.core.llms._anthropic.ask",
        "documentation": {}
    },
    {
        "label": "get_anthropic_llm",
        "kind": 2,
        "importPath": "think_reason_learn.core.llms._anthropic.ask",
        "description": "think_reason_learn.core.llms._anthropic.ask",
        "peekOfCode": "def get_anthropic_llm(api_key: str) -> AnthropicLLM | None:\n    return AnthropicLLM(api_key) if api_key else None",
        "detail": "think_reason_learn.core.llms._anthropic.ask",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._anthropic.ask",
        "description": "think_reason_learn.core.llms._anthropic.ask",
        "peekOfCode": "logger = logging.getLogger(__name__)\nDEFAULT_MAX_TOKENS = 4096\nclass AnthropicInput(TypedDict):\n    messages: List[MessageParam]\n    system: str | Iterable[TextBlockParam] | NotGiven\n    tools: List[ToolUnionParam] | NotGiven\n    tool_choice: ToolChoiceParam | NotGiven\n    temperature: float | NotGiven\n    kwargs: Dict[str, Any]\nclass AnthropicLLM(metaclass=SingletonMeta):",
        "detail": "think_reason_learn.core.llms._anthropic.ask",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MAX_TOKENS",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._anthropic.ask",
        "description": "think_reason_learn.core.llms._anthropic.ask",
        "peekOfCode": "DEFAULT_MAX_TOKENS = 4096\nclass AnthropicInput(TypedDict):\n    messages: List[MessageParam]\n    system: str | Iterable[TextBlockParam] | NotGiven\n    tools: List[ToolUnionParam] | NotGiven\n    tool_choice: ToolChoiceParam | NotGiven\n    temperature: float | NotGiven\n    kwargs: Dict[str, Any]\nclass AnthropicLLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:",
        "detail": "think_reason_learn.core.llms._anthropic.ask",
        "documentation": {}
    },
    {
        "label": "AnthropicChoice",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._anthropic.schemas",
        "description": "think_reason_learn.core.llms._anthropic.schemas",
        "peekOfCode": "class AnthropicChoice(BaseModel):\n    \"\"\"An LLM from Anthropic.\"\"\"\n    provider: Literal[\"anthropic\"] = \"anthropic\"\n    model: AnthropicChatModel\nclass AnthropicChoiceDict(TypedDict):\n    \"\"\"An LLM from Anthropic.\"\"\"\n    provider: Literal[\"anthropic\"]\n    model: AnthropicChatModel",
        "detail": "think_reason_learn.core.llms._anthropic.schemas",
        "documentation": {}
    },
    {
        "label": "AnthropicChoiceDict",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._anthropic.schemas",
        "description": "think_reason_learn.core.llms._anthropic.schemas",
        "peekOfCode": "class AnthropicChoiceDict(TypedDict):\n    \"\"\"An LLM from Anthropic.\"\"\"\n    provider: Literal[\"anthropic\"]\n    model: AnthropicChatModel",
        "detail": "think_reason_learn.core.llms._anthropic.schemas",
        "documentation": {}
    },
    {
        "label": "GeminiLLM",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._google.ask",
        "description": "think_reason_learn.core.llms._google.ask",
        "peekOfCode": "class GeminiLLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = genai.Client(api_key=api_key)\n    def _process_kwargs(\n        self,\n        kwargs: Dict[str, Any],\n    ) -> Dict[str, Any]:\n        \"\"\"Process Google kwargs and query.\"\"\"\n        return {\n            k: v or None",
        "detail": "think_reason_learn.core.llms._google.ask",
        "documentation": {}
    },
    {
        "label": "get_google_llm",
        "kind": 2,
        "importPath": "think_reason_learn.core.llms._google.ask",
        "description": "think_reason_learn.core.llms._google.ask",
        "peekOfCode": "def get_google_llm(api_key: str) -> GeminiLLM | None:\n    return GeminiLLM(api_key) if api_key else None",
        "detail": "think_reason_learn.core.llms._google.ask",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._google.ask",
        "description": "think_reason_learn.core.llms._google.ask",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GeminiLLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = genai.Client(api_key=api_key)\n    def _process_kwargs(\n        self,\n        kwargs: Dict[str, Any],\n    ) -> Dict[str, Any]:\n        \"\"\"Process Google kwargs and query.\"\"\"\n        return {",
        "detail": "think_reason_learn.core.llms._google.ask",
        "documentation": {}
    },
    {
        "label": "GoogleChoice",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._google.schemas",
        "description": "think_reason_learn.core.llms._google.schemas",
        "peekOfCode": "class GoogleChoice(BaseModel):\n    \"\"\"An LLM from Google.\"\"\"\n    provider: Literal[\"google\"] = \"google\"\n    model: GoogleChatModel\nclass GoogleChoiceDict(TypedDict):\n    \"\"\"An LLM from Google.\"\"\"\n    provider: Literal[\"google\"]\n    model: GoogleChatModel",
        "detail": "think_reason_learn.core.llms._google.schemas",
        "documentation": {}
    },
    {
        "label": "GoogleChoiceDict",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._google.schemas",
        "description": "think_reason_learn.core.llms._google.schemas",
        "peekOfCode": "class GoogleChoiceDict(TypedDict):\n    \"\"\"An LLM from Google.\"\"\"\n    provider: Literal[\"google\"]\n    model: GoogleChatModel",
        "detail": "think_reason_learn.core.llms._google.schemas",
        "documentation": {}
    },
    {
        "label": "OpenAILLM",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._openai.ask",
        "description": "think_reason_learn.core.llms._openai.ask",
        "peekOfCode": "class OpenAILLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = OpenAI(api_key=api_key)\n        self.aclient = AsyncOpenAI(api_key=api_key)\n    def _process_kwargs(self, kwargs: Dict[str, Any]) -> Dict[str, Any]:\n        return {\n            k: v if v else (None if v is None else NOT_GIVEN)\n            for k, v in kwargs.items()\n            if k in self.client.responses.parse.__annotations__\n        }",
        "detail": "think_reason_learn.core.llms._openai.ask",
        "documentation": {}
    },
    {
        "label": "get_openai_llm",
        "kind": 2,
        "importPath": "think_reason_learn.core.llms._openai.ask",
        "description": "think_reason_learn.core.llms._openai.ask",
        "peekOfCode": "def get_openai_llm(api_key: str) -> OpenAILLM | None:\n    return OpenAILLM(api_key) if api_key else None",
        "detail": "think_reason_learn.core.llms._openai.ask",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._openai.ask",
        "description": "think_reason_learn.core.llms._openai.ask",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass OpenAILLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = OpenAI(api_key=api_key)\n        self.aclient = AsyncOpenAI(api_key=api_key)\n    def _process_kwargs(self, kwargs: Dict[str, Any]) -> Dict[str, Any]:\n        return {\n            k: v if v else (None if v is None else NOT_GIVEN)\n            for k, v in kwargs.items()\n            if k in self.client.responses.parse.__annotations__",
        "detail": "think_reason_learn.core.llms._openai.ask",
        "documentation": {}
    },
    {
        "label": "OpenAIChoice",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._openai.schemas",
        "description": "think_reason_learn.core.llms._openai.schemas",
        "peekOfCode": "class OpenAIChoice(BaseModel):\n    \"\"\"An LLM from OpenAI.\"\"\"\n    provider: Literal[\"openai\"] = \"openai\"\n    model: OpenAIChatModel\nclass OpenAIChoiceDict(TypedDict):\n    \"\"\"An LLM from OpenAI.\"\"\"\n    provider: Literal[\"openai\"]\n    model: OpenAIChatModel",
        "detail": "think_reason_learn.core.llms._openai.schemas",
        "documentation": {}
    },
    {
        "label": "OpenAIChoiceDict",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._openai.schemas",
        "description": "think_reason_learn.core.llms._openai.schemas",
        "peekOfCode": "class OpenAIChoiceDict(TypedDict):\n    \"\"\"An LLM from OpenAI.\"\"\"\n    provider: Literal[\"openai\"]\n    model: OpenAIChatModel",
        "detail": "think_reason_learn.core.llms._openai.schemas",
        "documentation": {}
    },
    {
        "label": "xAILLM",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._xai.ask",
        "description": "think_reason_learn.core.llms._xai.ask",
        "peekOfCode": "class xAILLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = Client(api_key=api_key)\n        self.aclient = AsyncClient(api_key=api_key)\n    def _process_kwargs(self, kwargs: Dict[str, Any]) -> Dict[str, Any]:\n        return {\n            k: v or None\n            for k, v in kwargs.items()\n            if k in self.client.chat.create.__annotations__\n        }",
        "detail": "think_reason_learn.core.llms._xai.ask",
        "documentation": {}
    },
    {
        "label": "get_xai_llm",
        "kind": 2,
        "importPath": "think_reason_learn.core.llms._xai.ask",
        "description": "think_reason_learn.core.llms._xai.ask",
        "peekOfCode": "def get_xai_llm(api_key: str) -> xAILLM | None:\n    return xAILLM(api_key) if api_key else None",
        "detail": "think_reason_learn.core.llms._xai.ask",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._xai.ask",
        "description": "think_reason_learn.core.llms._xai.ask",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass xAILLM(metaclass=SingletonMeta):\n    def __init__(self, api_key: str) -> None:\n        self.client = Client(api_key=api_key)\n        self.aclient = AsyncClient(api_key=api_key)\n    def _process_kwargs(self, kwargs: Dict[str, Any]) -> Dict[str, Any]:\n        return {\n            k: v or None\n            for k, v in kwargs.items()\n            if k in self.client.chat.create.__annotations__",
        "detail": "think_reason_learn.core.llms._xai.ask",
        "documentation": {}
    },
    {
        "label": "XAIChoice",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._xai.schemas",
        "description": "think_reason_learn.core.llms._xai.schemas",
        "peekOfCode": "class XAIChoice(BaseModel):\n    \"\"\"An LLM from XAI.\"\"\"\n    provider: Literal[\"xai\"] = \"xai\"\n    model: xAIChatModel\nclass XAIChoiceDict(TypedDict):\n    \"\"\"An LLM from XAI.\"\"\"\n    provider: Literal[\"xai\"]\n    model: xAIChatModel",
        "detail": "think_reason_learn.core.llms._xai.schemas",
        "documentation": {}
    },
    {
        "label": "XAIChoiceDict",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._xai.schemas",
        "description": "think_reason_learn.core.llms._xai.schemas",
        "peekOfCode": "class XAIChoiceDict(TypedDict):\n    \"\"\"An LLM from XAI.\"\"\"\n    provider: Literal[\"xai\"]\n    model: xAIChatModel",
        "detail": "think_reason_learn.core.llms._xai.schemas",
        "documentation": {}
    },
    {
        "label": "LLM",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._ask",
        "description": "think_reason_learn.core.llms._ask",
        "peekOfCode": "class LLM(metaclass=SingletonMeta):\n    \"\"\"A singleton class that provides a unified interface for the LLMs.\"\"\"\n    def __init__(self) -> None:\n        self.anthropic_llm = get_anthropic_llm(settings.ANTHROPIC_API_KEY)\n        self.google_llm = get_google_llm(settings.GOOGLE_AI_API_KEY)\n        self.openai_llm = get_openai_llm(settings.OPENAI_API_KEY)\n        self.xai_llm = get_xai_llm(settings.XAI_API_KEY)\n    def _val_llm_priority_and_api_keys(\n        self, llm_priority: List[LLMChoice]\n    ) -> List[LLMChoiceModel]:",
        "detail": "think_reason_learn.core.llms._ask",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._ask",
        "description": "think_reason_learn.core.llms._ask",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LLM(metaclass=SingletonMeta):\n    \"\"\"A singleton class that provides a unified interface for the LLMs.\"\"\"\n    def __init__(self) -> None:\n        self.anthropic_llm = get_anthropic_llm(settings.ANTHROPIC_API_KEY)\n        self.google_llm = get_google_llm(settings.GOOGLE_AI_API_KEY)\n        self.openai_llm = get_openai_llm(settings.OPENAI_API_KEY)\n        self.xai_llm = get_xai_llm(settings.XAI_API_KEY)\n    def _val_llm_priority_and_api_keys(\n        self, llm_priority: List[LLMChoice]",
        "detail": "think_reason_learn.core.llms._ask",
        "documentation": {}
    },
    {
        "label": "LLMResponse",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "class LLMResponse(BaseModel, Generic[T]):\n    \"\"\"A response from an LLM.\"\"\"\n    response: T | None = Field(default=None, description=\"The response from the LLM.\")\n    logprobs: List[Tuple[str, float | None]] = Field(\n        description=\"The log probabilities of the response.\"\n    )\n    total_tokens: int | None = Field(\n        default=None,\n        description=\"The total number of input and output tokens used \"\n        \"to generate the response.\",",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "NotGiven",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "class NotGiven:\n    \"\"\"A sentinel singleton class used to distinguish omitted keyword arguments.\n    Examples:\n        .. code-block:: python\n            def get(timeout: int | NotGiven | None = NotGiven()) -> Response: ...\n            get(timeout=1)      # 1s timeout\n            get(timeout=None)   # No timeout\n            get()               # Default timeout behavior; may not be statically\n                                # known at the method definition.\n    \"\"\"",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "TokenCount",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "class TokenCount:\n    \"\"\"A token count from an LLM.\"\"\"\n    provider: LLMProvider = field(metadata={\"description\": \"The provider of the LLM.\"})\n    model: LLMChatModel = field(metadata={\"description\": \"The LLM model used.\"})\n    number_of_calls: int = field(\n        default=0, metadata={\"description\": \"The number of calls to the LLM.\"}\n    )\n    value: int = field(default=0, metadata={\"description\": \"The token count.\"})\n    is_min_estimate: bool = field(\n        default=False,",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "TokenCounter",
        "kind": 6,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "class TokenCounter:\n    \"\"\"Compactly represents token usage across multiple calls to LLMs.\"\"\"\n    token_counts: Dict[str, TokenCount] = field(\n        default_factory=dict,\n        metadata={\"description\": \"The token counts for each provider/model pair.\"},\n    )\n    _lock: asyncio.Lock = field(default_factory=asyncio.Lock)\n    async def append(\n        self,\n        model: LLMChatModel,",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "T = TypeVar(\"T\", bound=BaseModel | str, covariant=True)\nLLMProvider: TypeAlias = Literal[\"anthropic\", \"google\", \"openai\", \"xai\"]\nLLMChatModel: TypeAlias = Union[\n    AnthropicChatModel,\n    GoogleChatModel,\n    OpenAIChatModel,\n    xAIChatModel,\n]\nLLMChoiceModel: TypeAlias = Union[\n    AnthropicChoice,",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "NOT_GIVEN",
        "kind": 5,
        "importPath": "think_reason_learn.core.llms._schemas",
        "description": "think_reason_learn.core.llms._schemas",
        "peekOfCode": "NOT_GIVEN = NotGiven()\n@dataclass(slots=True)\nclass TokenCount:\n    \"\"\"A token count from an LLM.\"\"\"\n    provider: LLMProvider = field(metadata={\"description\": \"The provider of the LLM.\"})\n    model: LLMChatModel = field(metadata={\"description\": \"The LLM model used.\"})\n    number_of_calls: int = field(\n        default=0, metadata={\"description\": \"The number of calls to the LLM.\"}\n    )\n    value: int = field(default=0, metadata={\"description\": \"The token count.\"})",
        "detail": "think_reason_learn.core.llms._schemas",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "think_reason_learn.core._config",
        "description": "think_reason_learn.core._config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Class to store all the settings of the application.\"\"\"\n    OPENAI_API_KEY: str = \"\"\n    GOOGLE_AI_API_KEY: str = \"\"\n    XAI_API_KEY: str = \"\"\n    ANTHROPIC_API_KEY: str = \"\"\n    model_config = SettingsConfigDict(\n        case_sensitive=False,\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",",
        "detail": "think_reason_learn.core._config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "think_reason_learn.core._config",
        "description": "think_reason_learn.core._config",
        "peekOfCode": "settings = Settings()  # type: ignore",
        "detail": "think_reason_learn.core._config",
        "documentation": {}
    },
    {
        "label": "SingletonMeta",
        "kind": 6,
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "peekOfCode": "class SingletonMeta(type):\n    _instances: ClassVar[Dict[type, object]] = {}\n    def __call__(cls: type[T], *args: Any, **kwargs: Any) -> T:\n        if cls not in cls._instances:  # type: ignore\n            cls._instances[cls] = super().__call__(*args, **kwargs)  # type: ignore\n        return cls._instances[cls]  # type: ignore\n__all__ = [\"SingletonMeta\"]",
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "peekOfCode": "T = TypeVar(\"T\")\nclass SingletonMeta(type):\n    _instances: ClassVar[Dict[type, object]] = {}\n    def __call__(cls: type[T], *args: Any, **kwargs: Any) -> T:\n        if cls not in cls._instances:  # type: ignore\n            cls._instances[cls] = super().__call__(*args, **kwargs)  # type: ignore\n        return cls._instances[cls]  # type: ignore\n__all__ = [\"SingletonMeta\"]",
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "think_reason_learn.core._singleton",
        "description": "think_reason_learn.core._singleton",
        "peekOfCode": "__all__ = [\"SingletonMeta\"]",
        "detail": "think_reason_learn.core._singleton",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "kind": 5,
        "importPath": "think_reason_learn.core._types",
        "description": "think_reason_learn.core._types",
        "peekOfCode": "JSONScalar = Union[str, int, float, bool, None]\nJSONValue = Union[JSONScalar, Dict[str, \"JSONValue\"], List[\"JSONValue\"]]",
        "detail": "think_reason_learn.core._types",
        "documentation": {}
    },
    {
        "label": "JSONValue",
        "kind": 5,
        "importPath": "think_reason_learn.core._types",
        "description": "think_reason_learn.core._types",
        "peekOfCode": "JSONValue = Union[JSONScalar, Dict[str, \"JSONValue\"], List[\"JSONValue\"]]",
        "detail": "think_reason_learn.core._types",
        "documentation": {}
    },
    {
        "label": "DataError",
        "kind": 6,
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "peekOfCode": "class DataError(Exception):\n    \"\"\"Data not in the expected format.\"\"\"\nclass LLMError(Exception):\n    \"\"\"LLM failed to respond.\"\"\"\nclass CorruptionError(Exception):\n    \"\"\"Internal state corruption detected. A model's state is corrupted.\"\"\"",
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "LLMError",
        "kind": 6,
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "peekOfCode": "class LLMError(Exception):\n    \"\"\"LLM failed to respond.\"\"\"\nclass CorruptionError(Exception):\n    \"\"\"Internal state corruption detected. A model's state is corrupted.\"\"\"",
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "CorruptionError",
        "kind": 6,
        "importPath": "think_reason_learn.core.exceptions",
        "description": "think_reason_learn.core.exceptions",
        "peekOfCode": "class CorruptionError(Exception):\n    \"\"\"Internal state corruption detected. A model's state is corrupted.\"\"\"",
        "detail": "think_reason_learn.core.exceptions",
        "documentation": {}
    },
    {
        "label": "NodeQuestion",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class NodeQuestion:\n    \"\"\"A question for generated at a node.\"\"\"\n    value: str = field(metadata={\"description\": \"The question text.\"})\n    choices: List[str] = field(\n        metadata={\"description\": \"The answer choices for the question.\"}\n    )\n    question_type: QuestionType = field(\n        metadata={\"description\": \"The type of the question.\"}\n    )\n    df_column: str = field(",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class Question(BaseModel):\n    value: str\n    choices: List[str]\n    question_type: QuestionType\nclass Questions(BaseModel):\n    questions: List[Question]\n    cumulative_memory: str = Field(..., description=CUMULATIVE_MEMORY_INSTRUCTIONS)\nclass Answer(BaseModel):\n    answer: str\n@dataclass(slots=True)",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "Questions",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class Questions(BaseModel):\n    questions: List[Question]\n    cumulative_memory: str = Field(..., description=CUMULATIVE_MEMORY_INSTRUCTIONS)\nclass Answer(BaseModel):\n    answer: str\n@dataclass(slots=True)\nclass Node:\n    \"\"\"A Node represents a decision point in GPTree.\"\"\"\n    id: int = field(metadata={\"description\": \"The id of the node.\"})\n    label: str = field(metadata={\"description\": \"The label of the node.\"})",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class Answer(BaseModel):\n    answer: str\n@dataclass(slots=True)\nclass Node:\n    \"\"\"A Node represents a decision point in GPTree.\"\"\"\n    id: int = field(metadata={\"description\": \"The id of the node.\"})\n    label: str = field(metadata={\"description\": \"The label of the node.\"})\n    question: NodeQuestion | None = field(\n        default=None,\n        metadata={",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class Node:\n    \"\"\"A Node represents a decision point in GPTree.\"\"\"\n    id: int = field(metadata={\"description\": \"The id of the node.\"})\n    label: str = field(metadata={\"description\": \"The label of the node.\"})\n    question: NodeQuestion | None = field(\n        default=None,\n        metadata={\n            \"description\": \"The chosen question at this node. E.g, \"\n            \"if criterion is gini, then the question with the lowest gini impurity.\"\n        },",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "BuildTask",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class BuildTask:\n    node_id: int\n    parent_id: int | None\n    depth: int\n    label: str\n    sample_indices: IndexArray\n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Convert the build task to a dictionary.\"\"\"\n        return asdict(self)\n    @classmethod",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "GPTree",
        "kind": 6,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "class GPTree:\n    \"\"\"LLM based decision tree classifier.\n    Note that GPTree auto saves the tree after each node is built.\n    Args:\n        qgen_llmc: LLMs to use for question generation, in priority order.\n        critic_llmc: LLMs to use for question critique, in priority order.\n        qgen_instr_llmc: LLMs for generating instructions.\n        qanswer_llmc: LLMs to use for answering questions, in priority order.\n            If None, use qgen_llmc.\n        qgen_temperature: Sampling temperature for question generation.",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "logger = logging.getLogger(__name__)\nIndexArray = npt.NDArray[np.intp]\n@dataclass(slots=True)\nclass NodeQuestion:\n    \"\"\"A question for generated at a node.\"\"\"\n    value: str = field(metadata={\"description\": \"The question text.\"})\n    choices: List[str] = field(\n        metadata={\"description\": \"The answer choices for the question.\"}\n    )\n    question_type: QuestionType = field(",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "IndexArray",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._gptree",
        "description": "think_reason_learn.gptree._gptree",
        "peekOfCode": "IndexArray = npt.NDArray[np.intp]\n@dataclass(slots=True)\nclass NodeQuestion:\n    \"\"\"A question for generated at a node.\"\"\"\n    value: str = field(metadata={\"description\": \"The question text.\"})\n    choices: List[str] = field(\n        metadata={\"description\": \"The answer choices for the question.\"}\n    )\n    question_type: QuestionType = field(\n        metadata={\"description\": \"The type of the question.\"}",
        "detail": "think_reason_learn.gptree._gptree",
        "documentation": {}
    },
    {
        "label": "num_questions_tag",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._prompts",
        "description": "think_reason_learn.gptree._prompts",
        "peekOfCode": "num_questions_tag = \"<number_of_questions>\"\nINSTRUCTIONS_FOR_GENERATING_QUESTION_GEN_INSTRUCTIONS = f\"\"\"\\\nYou are a helper LLM that writes an instructions template for a question\ngenerator used in a GPTree classification task.\nGoal:\n- Produce a concise, reusable template that instructs a question-generator LLM\n  to generate {num_questions_tag} discriminative questions per node.\n- The template must NOT include prefatory text or labels—return only the\n  template content.\n- Allow the generator to decide what to ask based on the task description and",
        "detail": "think_reason_learn.gptree._prompts",
        "documentation": {}
    },
    {
        "label": "INSTRUCTIONS_FOR_GENERATING_QUESTION_GEN_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._prompts",
        "description": "think_reason_learn.gptree._prompts",
        "peekOfCode": "INSTRUCTIONS_FOR_GENERATING_QUESTION_GEN_INSTRUCTIONS = f\"\"\"\\\nYou are a helper LLM that writes an instructions template for a question\ngenerator used in a GPTree classification task.\nGoal:\n- Produce a concise, reusable template that instructs a question-generator LLM\n  to generate {num_questions_tag} discriminative questions per node.\n- The template must NOT include prefatory text or labels—return only the\n  template content.\n- Allow the generator to decide what to ask based on the task description and\n  the rolling cumulative memory, without over-constraining its creativity.",
        "detail": "think_reason_learn.gptree._prompts",
        "documentation": {}
    },
    {
        "label": "QUESTION_ANSWER_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._prompts",
        "description": "think_reason_learn.gptree._prompts",
        "peekOfCode": "QUESTION_ANSWER_INSTRUCTIONS = \"\"\"\\\nYou are an answering agent in a GPTree classification pipeline.\nGiven:\n- A question,\n- A set of allowed answer choices,\n- One sample (text),\nTask:\n- Choose exactly one answer from the provided choices that best fits the sample.\n- Base your decision solely on the sample and the question; do not invent new choices.\n- If multiple choices seem plausible, pick the one most strongly supported",
        "detail": "think_reason_learn.gptree._prompts",
        "documentation": {}
    },
    {
        "label": "CUMULATIVE_MEMORY_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._prompts",
        "description": "think_reason_learn.gptree._prompts",
        "peekOfCode": "CUMULATIVE_MEMORY_INSTRUCTIONS = \"\"\"\\\nUsing the prior cumulative memory (if any) and what was just learned at this node,\nwrite a brief note for the next node. Do not discard the prior cumulative memory\nbut build on it.\nGuidelines:\n- Summarize key observations and outcomes so far at a high level, and provide gentle\n  hints or priorities for the next node.\n- Treat this as guidance, not a constraint; avoid prescriptive language.\n- Do not repeat raw samples or sensitive details; avoid long quotes.\n- Keep it concise (1-5 sentences).",
        "detail": "think_reason_learn.gptree._prompts",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._types",
        "description": "think_reason_learn.gptree._types",
        "peekOfCode": "Sample = Dict[str, JSONValue]\nQuestionType = Literal[\"INFERENCE\", \"CODE\"]\nCriterion = Literal[\"gini\"]",
        "detail": "think_reason_learn.gptree._types",
        "documentation": {}
    },
    {
        "label": "QuestionType",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._types",
        "description": "think_reason_learn.gptree._types",
        "peekOfCode": "QuestionType = Literal[\"INFERENCE\", \"CODE\"]\nCriterion = Literal[\"gini\"]",
        "detail": "think_reason_learn.gptree._types",
        "documentation": {}
    },
    {
        "label": "Criterion",
        "kind": 5,
        "importPath": "think_reason_learn.gptree._types",
        "description": "think_reason_learn.gptree._types",
        "peekOfCode": "Criterion = Literal[\"gini\"]",
        "detail": "think_reason_learn.gptree._types",
        "documentation": {}
    },
    {
        "label": "num_questions_tag",
        "kind": 5,
        "importPath": "think_reason_learn.rrf._prompts",
        "description": "think_reason_learn.rrf._prompts",
        "peekOfCode": "num_questions_tag = \"<number_of_questions>\"\nQUESTION_GEN_INSTRUCTIONS = f\"\"\"\\\nYou are part of an intelligent team of LLMs generating YES/NO questions for a \nbinary classification task.\nGiven:\n- A task description\nTask:\n- Generate a prompt/instructions template that instructs a question-generator LLM\n  to generate {num_questions_tag} YES/NO distinctive questions that are discriminative \n  for the task.",
        "detail": "think_reason_learn.rrf._prompts",
        "documentation": {}
    },
    {
        "label": "QUESTION_GEN_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.rrf._prompts",
        "description": "think_reason_learn.rrf._prompts",
        "peekOfCode": "QUESTION_GEN_INSTRUCTIONS = f\"\"\"\\\nYou are part of an intelligent team of LLMs generating YES/NO questions for a \nbinary classification task.\nGiven:\n- A task description\nTask:\n- Generate a prompt/instructions template that instructs a question-generator LLM\n  to generate {num_questions_tag} YES/NO distinctive questions that are discriminative \n  for the task.\n- Let the question-generator LLM understand the task and generate questions that are",
        "detail": "think_reason_learn.rrf._prompts",
        "documentation": {}
    },
    {
        "label": "CUMULATIVE_MEMORY_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.rrf._prompts",
        "description": "think_reason_learn.rrf._prompts",
        "peekOfCode": "CUMULATIVE_MEMORY_INSTRUCTIONS = \"\"\"\\\nUsing the prior cumulative memory (if any) and what was just learned at this generation,\nwrite a brief note for the next generation. Do not discard the prior cumulative memory\nbut build on it.\nGuidelines:\n- Summarize key observations and outcomes so far at a high level, and provide gentle\n  hints or priorities for the next generation.\n- Treat this as guidance, not a constraint; avoid prescriptive language.\n- Do not repeat raw samples or sensitive details; avoid long quotes.\n- Keep it concise (1-5 sentences).",
        "detail": "think_reason_learn.rrf._prompts",
        "documentation": {}
    },
    {
        "label": "QUESTION_ANSWER_INSTRUCTIONS",
        "kind": 5,
        "importPath": "think_reason_learn.rrf._prompts",
        "description": "think_reason_learn.rrf._prompts",
        "peekOfCode": "QUESTION_ANSWER_INSTRUCTIONS = \"\"\"\\\nYou are an answering agent in a RRF classification pipeline.\nGiven:\n- A question,\n- One sample (text),\nTask:\n- Answer, YES/NO question based on the sample.\n- Be deterministic.\nOutput:\n- Return only the chosen answer string—no explanations, punctuation, or extra text.",
        "detail": "think_reason_learn.rrf._prompts",
        "documentation": {}
    },
    {
        "label": "Questions",
        "kind": 6,
        "importPath": "think_reason_learn.rrf._rrf",
        "description": "think_reason_learn.rrf._rrf",
        "peekOfCode": "class Questions(BaseModel):\n    questions: List[str] = Field(..., description=\"The list of generated questions.\")\n    cumulative_memory: str = Field(..., description=CUMULATIVE_MEMORY_INSTRUCTIONS)\nclass Answer(BaseModel):\n    answer: Literal[\"YES\", \"NO\"]\nclass QuestionExclusion(StrEnum):\n    SEMANTICS = (\n        \"semantics\",\n        \"Excluded because of semantic overlap with other questions\",\n    )",
        "detail": "think_reason_learn.rrf._rrf",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "think_reason_learn.rrf._rrf",
        "description": "think_reason_learn.rrf._rrf",
        "peekOfCode": "class Answer(BaseModel):\n    answer: Literal[\"YES\", \"NO\"]\nclass QuestionExclusion(StrEnum):\n    SEMANTICS = (\n        \"semantics\",\n        \"Excluded because of semantic overlap with other questions\",\n    )\n    PREDICTION_SIMILARITY = (\n        \"prediction_similarity\",\n        \"Excluded due to high prediction similarity with other questions\",",
        "detail": "think_reason_learn.rrf._rrf",
        "documentation": {}
    },
    {
        "label": "QuestionExclusion",
        "kind": 6,
        "importPath": "think_reason_learn.rrf._rrf",
        "description": "think_reason_learn.rrf._rrf",
        "peekOfCode": "class QuestionExclusion(StrEnum):\n    SEMANTICS = (\n        \"semantics\",\n        \"Excluded because of semantic overlap with other questions\",\n    )\n    PREDICTION_SIMILARITY = (\n        \"prediction_similarity\",\n        \"Excluded due to high prediction similarity with other questions\",\n    )\n    EXPERT = (\"expert\", \"Excluded manually by expert\")",
        "detail": "think_reason_learn.rrf._rrf",
        "documentation": {}
    },
    {
        "label": "RRF",
        "kind": 6,
        "importPath": "think_reason_learn.rrf._rrf",
        "description": "think_reason_learn.rrf._rrf",
        "peekOfCode": "class RRF:\n    \"\"\"Interpretable ensemble binary classifier.\n    Args:\n        qgen_llmc: LLMs to use for question generation, in priority order.\n        qanswer_llmc: LLMs to use for answering questions, in priority order.\n            If None, use qgen_llmc.\n        qgen_temperature: Sampling temperature for question generation.\n        qanswer_temperature: Sampling temperature for answering questions.\n        llm_semaphore_limit: Max concurrent LLM calls.\n        answer_similarity_func: Function to use for answer similarity.",
        "detail": "think_reason_learn.rrf._rrf",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "think_reason_learn.rrf._rrf",
        "description": "think_reason_learn.rrf._rrf",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Questions(BaseModel):\n    questions: List[str] = Field(..., description=\"The list of generated questions.\")\n    cumulative_memory: str = Field(..., description=CUMULATIVE_MEMORY_INSTRUCTIONS)\nclass Answer(BaseModel):\n    answer: Literal[\"YES\", \"NO\"]\nclass QuestionExclusion(StrEnum):\n    SEMANTICS = (\n        \"semantics\",\n        \"Excluded because of semantic overlap with other questions\",",
        "detail": "think_reason_learn.rrf._rrf",
        "documentation": {}
    }
]